package:
  name: fastgs
  version: 0.0.3
source:
  sha256: 0fb9da684bb1b44883e15f4006672262a7525059429b8c6c733d42c5ff1a1e3e
  url: https://files.pythonhosted.org/packages/35/c9/0340290b3d8088efcf93da6380763f6275167a7346ab35e7c181ec9d61c0/fastgs-0.0.3.tar.gz
about:
  description: "Welcome to fastgs\n================\n\n<!-- WARNING: THIS FILE WAS\
    \ AUTOGENERATED! DO NOT EDIT! -->\n\n## Introduction\n\n**This library is currently\
    \ in *alpha*, neither the functionality nor\nthe API is stable**\n\nThis library\
    \ provides geospatial multispectral image support for fastai.\nFastAI already\
    \ has extensive support for RGB images in the pipeline. I\ntry to achieve feature\
    \ parity for multi-spectral images with this\nlibrary, specifically in the context\
    \ of Sentinel 2 geospatial imaging.\n\n## Install\n\n``` sh\npip install fastgs\n\
    ```\n\n## How to use\n\nThe low-level functionality is wrapped into a class that\
    \ loads sets of\nSentinel 2 channels into a multi-spectral tensor (a\n[`TensorImageMS`](https://restlessronin.github.io/fastgs/vision.core.html#tensorimagems)\n\
    subclass of `fastai` `TensorImage` which itself is a subclass of the\n`pytorch`\
    \ `Tensor`).\n\n``` python\nfrom fastgs.geospatial.sentinel import *\n```\n\n\
    If we have the following functions to map an image index to an array of\nchannel\
    \ files\n\n``` python\ndef get_input(stem: str) -> str:\n    \"Get full input\
    \ path for stem\"\n    return \"./images/\" + stem\n\ndef tile_img_name(chn_id:\
    \ str, tile_num: int) -> str:\n    \"File name from channel id and tile number\"\
    \n    return f\"Sentinel20m-{chn_id}-20200215-{tile_num:03d}.png\"\n\ndef get_channel_filenames(chn_ids,\
    \ tile_idx):\n    \"Get list of all channel filenames for one tile idx\"\n   \
    \ return [get_input(tile_img_name(x, tile_idx)) for x in chn_ids]\n```\n\nthen\
    \ the following code creates a class that can load 11 Sentinel 2\nchannels into\
    \ a\n[`TensorImageMS`](https://restlessronin.github.io/fastgs/vision.core.html#tensorimagems).\n\
    \n``` python\nfrom fastgs.vision.io import * # defines read_multichan_files_as_tensor\n\
    \nsnt_12 = Sentinel2(\n    [\"B02\",\"B03\",\"B04\",\"B05\",\"B06\",\"B07\",\"\
    B08\",\"B8A\",\"B11\",\"B12\",\"AOT\"],\n    [Sentinel2.natural_color, [\"B07\"\
    ,\"B06\",\"B05\"],[\"B12\",\"B11\",\"B8A\"],[\"B08\"]],\n    get_channel_filenames,\n\
    \    read_multichan_files_as_tensor\n)\n```\n\nThe second parameter is a list\
    \ of 4 channel sets that are minimally\nrequired to visualize all the individual\
    \ channels.\n\n``` python\nimg_12 = snt_12.load_tensor(66)\nimg_12.show()\n```\n\
    \n    [<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>]\n\n![](index_files/figure-gfm/cell-5-output-2.png)\n\
    \n## Acknowledgements\n\nThis library is inspired by the following notebooks (and\
    \ related works\nby the authors)\n\n- https://dpird-dma.github.io/blog/Multispectral-image-classification-Transfer-Learning/\n\
    - https://github.com/cordmaur/Fastai2-Medium/blob/master/01_Create_Datablock.ipynb\n"
  dev_url: https://restlessronin.github.io
  doc_url: https://restlessronin.github.io
  home: https://restlessronin.github.io
  license: Apache Software
  license_family: APACHE
  summary: Geospatial (especially Multi-Spectral) support for fastai
build:
  noarch: python
  number: '0'
  script: '{{ PYTHON }} -m pip install . -vv'
extra:
  recipe-maintainers:
  - restlessronin
requirements:
  host:
  - pip
  - python
  - packaging
  - fastai>=2.7.10
  run:
  - pip
  - python
  - packaging
  - fastai>=2.7.10
test:
  imports:
  - fastgs
